+++
title = "Pixelated Graphics"
description = "Do you want to achieve that retro look? or maybe just want to make you screenshots sharper?"
date = "2022-06-20T11:26:20"
+++
<h1>Pixelated Graphics and Pixel perfection</h1>
<article class="text">Of course, our devices display pictures using pixels <a
        href="https://en.wikipedia.org/wiki/Vector_monitor">(commonly used ones at least)</a> but that's not what I
    mean. Sometimes we need to display big, sharp and visible pixels. Here are some ways to do that on the web</article>
<figure>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/36/TR_Pamukkale_Laodicea_asv2020-02_img11.jpg/150px-TR_Pamukkale_Laodicea_asv2020-02_img11.webp"
        alt="Archaeological site in Turkey, low resolution." width="600" class="pixelated-rendering">
    <figcaption>Low resolution image scaled up and displayed with <code>image-rendering: pixelated</code>. Photo by
        <a href="https://commons.wikimedia.org/wiki/File:TR_Pamukkale_Laodicea_asv2020-02_img11.jpg">A.Savin</a>
    </figcaption>
</figure>
<article class="text">This forces our browser to use the nearest neighbor scaling algorithm, perfect one for displaying
    pixel art or low resolution images. It also works well for displaying computer graphics on mobile devices, instead of
    letting the device use the default scaling algorithm, better suited for photos.</article>
<figure>
    <div>
        <img src="https://upload.wikimedia.org/wikipedia/commons/4/4d/Simple_KDE_Dialog_example.png"
            alt="simple KDE dialog" class="pixelated-rendering" width="426">
        <img src="https://upload.wikimedia.org/wikipedia/commons/4/4d/Simple_KDE_Dialog_example.png" alt="" width="426">
    </div>
    <figcaption>First image has the <code>pixelated</code> scaling set, and second one is using the default scaling.
    </figcaption>
</figure>
<article class="text">Sometimes we don't have access to a low resolution image, but for some reason, artistic or
    otherwise, we want to make it look pixelated. This can be achieved with a simple svg filter! Here is a step by step
    illustration:</article>
<figure>
    <svg width="640" height="480" xmlns="http://www.w3.org/2000/svg">
        <defs>
            <image id="img"
                href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Pelargonium_-_dark_red_flowers.jpg/640px-Pelargonium_-_dark_red_flowers.webp" />
            <mask id="step1">
                <rect width="160" height="480" fill="white" />
            </mask>
            <mask id="step2">
                <rect x="160" width="160" height="480" fill="white" />
            </mask>
            <mask id="step3">
                <rect x="320" width="160" height="480" fill="white" />
            </mask>
            <mask id="step4">
                <rect x="480" width="160" height="480" fill="white" />
            </mask>
            <filter id="step2f">
                <feFlood x="8" y="8" height="5" width="5" flood-color="#F8F8F2" />
                <feComposite width="20" height="20" />
                <feTile />
            </filter>
            <filter id="step3f">
                <feFlood x="8" y="8" height="5" width="5" />
                <feComposite width="20" height="20" />
                <feTile result="a" />
                <feComposite in="SourceGraphic" in2="a" operator="in" />
            </filter>
            <filter id="step4f" color-interpolation-filters="linearRGB">
                <feFlood x="1" y="1" height="1" width="1" />
                <feComposite width="9" height="9" />
                <feTile result="a" />
                <feComposite in="SourceGraphic" in2="a" operator="in" />
                <feMorphology operator="dilate" radius="4"/>
            </filter>
        </defs>
        <use href="#img" mask="url(#step1)" />
        <use href="#img" mask="url(#step2)" filter="url(#step2f)" />
        <use href="#img" mask="url(#step3)" filter="url(#step3f)" />
        <use href="#img" mask="url(#step4)" filter="url(#step4f)" />
    </svg>
    <figcaption>Photo by <a
            href="https://commons.wikimedia.org/wiki/File:Pelargonium_-_dark_red_flowers.jpg">DohleSchnackfass</a>
    </figcaption>
</figure>
<figure>
    <svg width="319" height="240" xmlns="http://www.w3.org/2000/svg">
        <filter id="animpix">
            <feFlood x="1" y="1" height="1" width="1" />
            <feComposite> 
                <animate attributeName="width" values="3;9" dur="2s" repeatCount="indefinite" calcMode="discrete" />
                <animate attributeName="height" values="3;9" dur="2s" repeatCount="indefinite" calcMode="discrete" />
            </feComposite>
            <feTile result="a" />
            <feComposite in="SourceGraphic" in2="a" operator="in" />
            <feMorphology operator="dilate" radius="4">
                <animate attributeName="radius" values="1;4" dur="2s" repeatCount="indefinite" calcMode="discrete" />
            </feMorphology>
        </filter>
        <image id="img" filter="url(#animpix)"
            href="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Tram_Kassel_460A.jpg/319px-Tram_Kassel_460A.jpg" />
    </svg>
    <figcaption>You can even animate it! Though smooth animation can be pretty slow on old computers. Photo by <a
            href="https://commons.wikimedia.org/wiki/File:Tram_Kassel_460A.jpg">AlfvanBeem</a></figcaption>
</figure>
<article class="text">I am a big fan of vectors, but making vectors pixelated isn't as simple. There is an option to
    render them without antialiasing - <code>shape-rendering="crispEdges"</code> but the pixels are still pretty small,
    especially on high density displays. The same filter used before on bitmap images won't work, you can't as easily sample
    pixels from a vector graphic.</article>
<figure>
    <svg width="253" height="152" viewBox="0 0 253 152" xmlns="http://www.w3.org/2000/svg" stroke="#F8F8F2"
        fill="transparent">
        <filter id="vecpixaa" filterUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">
            <feFlood x="1" y="1" height="1" width="1" />
            <feComposite width="5" height="5" />
            <feTile result="a" />
            <feComposite in="SourceGraphic" in2="a" operator="in" />
            <feMorphology operator="dilate" radius="2"/>
        </filter>
        <g shape-rendering="crispEdges">
            <path d="M29 58Q76 62 120 58L114 53 110 57" />
            <path d="M78 32Q71 29 75 34 76 64 75 94" />
            <path d="M104 33Q96 30 101 35 102 64 101 92" />
            <path d="M75 86Q88 88 100 86" />
            <path stroke-width="3"
                d="M53 34Q45 33 49 36C46 66 53 92 49 118Q46 109 58 112 90 112 115 111 110 103 108 109" />
        </g>
        <g filter="url(#vecpixaa)" stroke-width="3">
            <path d="M146 34Q146 57 148 75" />
            <path d="M149 36Q176 37 205 35 207 32 210 36L207 36Q208 54 204 74" />
            <path d="M177 39Q174 39 176 40L176 71" />
            <path d="M150 53Q176 52 204 53" />
            <path d="M149 69Q147 71 153 69L204 69" />
            <path d="M167 70Q157 86 131 95" />
            <path d="M183 70Q199 87 219 91" />
            <path d="M167 83Q158 81 163 85 164 113 135 120" />
            <path d="M194 84Q184 80 189 85 193 103 185 118" />
        </g>
    </svg>
    <figcaption>First character uses <code>shape-rendering="crispEdges"</code>, the second one has the same filter as
        above applied.</figcaption>
</figure>
<article class="text">Well, the vector on the right is pixelated, but the antialiasing is still showing. You can use a
    discrete table lookup on the alpha value to make sure all pixels are either fully filled or transparent.</article>
<figure>
    <svg width="253" height="152" viewBox="0 0 253 152" xmlns="http://www.w3.org/2000/svg" stroke="#F8F8F2"
        fill="transparent" stroke-width="3">
        <filter id="vecpixnoaa1" filterUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">
            <feFlood x="1" y="1" height="1" width="1" />
            <feComposite width="3" height="3" />
            <feTile result="a" />
            <feComposite in="SourceGraphic" in2="a" operator="in" />
            <feMorphology operator="dilate" radius="1"/>
            <feComponentTransfer>
                <feFuncA type="discrete" tableValues="0 1" />
            </feComponentTransfer>
        </filter>
        <filter id="vecpixnoaa2" filterUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">
            <feFlood x="1" y="1" height="1" width="1" />
            <feComposite width="3" height="3" />
            <feTile result="a" />
            <feComposite in="SourceGraphic" in2="a" operator="in" />
            <feMorphology operator="dilate" radius="1"/>
            <feComponentTransfer>
                <feFuncA type="discrete" tableValues="0 1 1 1 1" />
            </feComponentTransfer>
        </filter>
        <g filter="url(#vecpixnoaa1)">
            <path d="M29 58Q76 62 120 58L114 53 110 57" />
            <path d="M78 32Q71 29 75 34 76 64 75 94" />
            <path d="M104 33Q96 30 101 35 102 64 101 92" />
            <path d="M75 86Q88 88 100 86" />
            <path d="M53 34Q45 33 49 36C46 66 53 92 49 118Q46 109 58 112 90 112 115 111 110 103 108 109" />
        </g>
        <g filter="url(#vecpixnoaa2)">
            <path d="M146 34Q146 57 148 75" />
            <path d="M149 36Q176 37 205 35 207 32 210 36L207 36Q208 54 204 74" />
            <path d="M177 39Q174 39 176 40L176 71" />
            <path d="M150 53Q176 52 204 53" />
            <path d="M149 69Q147 71 153 69L204 69" />
            <path d="M167 70Q157 86 131 95" />
            <path d="M183 70Q199 87 219 91" />
            <path d="M167 83Q158 81 163 85 164 113 135 120" />
            <path d="M194 84Q184 80 189 85 193 103 185 118" />
        </g>
    </svg>
    <figcaption>Different lookup tables produce different results.</figcaption>
</figure>
<article class="text">What about text? In CSS there is the <code>font-smoothing</code> property, but it does not work
    everywhere and can break with some fonts. You can try using bitmap fonts, but on high density displays it will still
    look like a standard vector font. Fortunately, we can still use the SVG filters on HTML elements and text!</article>
<figure>
    <div style="font-size: 2.2rem; font-family: 'Times New Roman', Times, serif;">
        <div>Regular text.</div>
        <div style="filter: url(#tlookup);">Text with alpha table lookup.</div>
        <div style="filter: url(#tpixel);">Text with the pixel filter.</div>
        <div style="filter: url(#tboth)">Text with both!</div>
    </div>
    <figcaption>Text with different filters applied.</figcaption>
</figure>
<svg width="0" height="0" xmlns="http://www.w3.org/2000/svg">
    <filter id="tlookup" filterUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">
        <feComponentTransfer>
            <feFuncA type="discrete" tableValues="0 1" />
        </feComponentTransfer>
    </filter>
    <filter id="tpixel" filterUnits="userSpaceOnUse">
        <feFlood x="3" y="3" width="1" height="1" />
        <feComposite width="3" height="3" />
        <feTile out="a" />
        <feComposite in="SourceGraphic" in2="a" operator="in" />
        <feMorphology operator="dilate" radius="1" />
    </filter>
    <filter id="tboth" filterUnits="userSpaceOnUse">
        <feFlood x="3" y="3" width="1" height="1" />
        <feComposite width="3" height="3" />
        <feTile out="a" />
        <feComposite in="SourceGraphic" in2="a" operator="in" />
        <feMorphology operator="dilate" radius="1" />
        <feComponentTransfer>
            <feFuncA type="discrete" tableValues="0 1 1 1" />
        </feComponentTransfer>
    </filter>
</svg>